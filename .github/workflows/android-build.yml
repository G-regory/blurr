name: Build Blurr Android App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Configuration de Java (JDK 17)
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Donner la permission d'exécution à gradlew
      run: chmod +x gradlew

    - name: Créer le fichier local.properties avec la clé API
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "GEMINI_API_KEYS=${{ secrets.GEMINI_API_KEYS }}" >> local.properties
      env:
        GEMINI_API_KEYS: ${{ secrets.GEMINI_API_KEYS }}

    - name: Créer les fichiers Kotlin manquants
      run: |
        # Créer le dossier presentation s'il n'existe pas
        mkdir -p app/src/main/java/com/gregory/blurr/presentation
        
        # Créer le fichier AiState.kt
        cat > app/src/main/java/com/gregory/blurr/presentation/AiState.kt << 'EOF'
        package com.gregory.blurr.presentation

        /**
         * Represents the different states of the AI assistant
         */
        sealed class AiState {
            object Idle : AiState()
            object Listening : AiState()
            object Processing : AiState()
            object Speaking : AiState()
            object Error : AiState()
            data class Working(val task: String) : AiState()
        }
        EOF
        
        # Créer le fichier ChatState.kt s'il n'existe pas
        if [ ! -f app/src/main/java/com/gregory/blurr/presentation/ChatState.kt ]; then
        cat > app/src/main/java/com/gregory/blurr/presentation/ChatState.kt << 'EOF'
        package com.gregory.blurr.presentation

        /**
         * Represents the state of the chat interface
         */
        data class ChatState(
            val messages: List<String> = emptyList(),
            val currentMessage: String = "",
            val aiState: AiState = AiState.Idle,
            val isLoading: Boolean = false,
            val error: String? = null
        ) {
            val canSendMessage: Boolean
                get() = currentMessage.isNotBlank() && aiState != AiState.Processing
        }
        EOF
        fi

    - name: Cache Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Nettoyer et compiler l'application
      run: ./gradlew clean assembleDebug --stacktrace --info

    - name: Vérifier si l'APK a été créé
      run: |
        if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
          echo "APK créé avec succès !"
          ls -la app/build/outputs/apk/debug/
        else
          echo "Erreur: APK non trouvé"
          find . -name "*.apk" -type f
        fi

    - name: Téléverser l'APK en tant qu'artefact
      uses: actions/upload-artifact@v4
      with:
        name: blurr-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
